/*
 * Copyright (C) 2012-2016 Jacob R. Lifshay
 * This file is part of Voxels.
 *
 * Voxels is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Voxels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Voxels; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */

// this is an example grammar based off of ecmascript

digit = [0-9];

letter = [a-zA-Z];

wsChar = [ \t\r\n];

lineComment = "//" [^\r\n]*;

blockComment = "/*" ([^/*] / "*"+[^/])* "*/";

ws = (wsChar / lineComment / blockComment)*;

identifierStart = letter / "_";

identifierContinue = identifierStart / digit;

newKeyword = "new" !identifierContinue ws;

voidKeyword = "void" !identifierContinue ws;

keyword = newKeyword
        / voidKeyword;

identifierName = identifierStart identifierContinue* ws;

identifier = !keyword identifierName;

number = digit+ ("." digit*)? (("e" / "E") ("+" / "-")? digit+)? ws
       / "." digit+ (("e" / "E") ("+" / "-")? digit+)? ws;

expression = additiveExpression ("," ws additiveExpression)*;

additiveExpression = multiplicativeExpression (("+" / "-") ws multiplicativeExpression)*;

multiplicativeExpression = unaryExpression (("*" / "/" / "%") ws unaryExpression)*;

unaryExpression = "+" ws unaryExpression
                / "-" ws unaryExpression
                / newExpression;

newExpression = newKeyword newExpression
              / memberExpression;

memberExpression = primaryExpression ("." ws identifier)*;
 
primaryExpression = "(" ws expression ")" ws
                  / identifier
                  / number;

goal = ws (expression ";" ws)*;