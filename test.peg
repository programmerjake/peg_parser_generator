code license {
/*
 * Copyright (C) 2012-2016 Jacob R. Lifshay
 * This file is part of Voxels.
 *
 * Voxels is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Voxels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Voxels; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */

// this is an example grammar based off of ecmascript
}

code header {
// this is in the header
#include <string>
}

code source {
// this is in the source
#include <iostream>
}

code class {
// this is in the class
}

namespace parser;

typedef std::string string;
typedef unsigned unsigned;

digit = [0-9];

hexDigit = [0-9a-fA-F];

digitValue:unsigned = [0-9]:digit {$$ = digit - U'0';}
                    / [a-z]:lower {$$ = lower - U'a' + 10;}
                    / [A-Z]:upper {$$ = upper - U'A' + 10;}
                    ;

hexDigitValue:unsigned = &hexDigit digitValue:value {$$ = value;};

letter = [a-zA-Z];

wsChar = [ \t\r\n];

lineComment = "//" [^\r\n]*;

blockComment = "/*" (!"*/" [^])* "*/";

ws = (wsChar / lineComment / blockComment)*;

unicodeEscape:char = "\\u"
                           (
                               hexDigitValue:digit0
                               hexDigitValue:digit1
                               hexDigitValue:digit2
                               hexDigitValue:digit3
                               {$$ = 0x1000 * digit0 + 0x100 * digit1 + 0x10 * digit2 + digit3;}
                           /
                               "{"
                               {$$ = 0;}
                               (
                                   hexDigitValue:digit
                                   &{
                                       $$ = $$ * 0x10 + digit;
                                       if($$ > 0x10FFFFUL) 
                                           $? = "unicode escape is too big";
                                   }
                               )+
                               "}"
                           );

identifierStart<escapesAllowedInIdentifiers:bool>:char = letter:letter {$$ = letter;}
    / "_" {$$ = '_';}
    / unicodeEscape:escapeValue
      &{
          $$ = escapeValue;
          if(!escapesAllowedInIdentifiers)
              $? = "escape sequence not allowed in an identifier";
          else if(($$ < 'a' || $$ > 'z') &&
                  ($$ < 'A' || $$ > 'Z') &&
                  $$ != '_')
              $? = "unicode escape does not make an identifier start";
      };

identifierContinue<escapesAllowedInIdentifiers:bool>:char = identifierStart:idStart {$$ = idStart;}
    / digit:digit {$$ = digit;}
    / unicodeEscape:escapeValue
    &{
        $$ = escapeValue;
        if(!escapesAllowedInIdentifiers)
            $? = "escape sequence not allowed in an identifier";
        else if(($$ < 'a' || $$ > 'z') &&
                ($$ < 'A' || $$ > 'Z') &&
                ($$ < '0' || $$ > '9') &&
                $$ != '_')
            $? = "unicode escape does not make an identifier continue";
    };

newKeyword = "new" !"\\" !identifierContinue<true> ws;

voidKeyword = "void" !"\\" !identifierContinue<true> ws;

keyword = newKeyword
        / voidKeyword;

identifierName<escapesAllowedInIdentifiers:bool>:string = identifierStart:firstChar {$$ = std::string(1, firstChar);} (identifierContinue:nextChar {$$ += nextChar;})* ws;

identifier<escapesAllowedInIdentifiers:bool>:string = !keyword identifierName:value {$$ = std::move(value);};

number:string = {$$ = "";} (digit:digit1 {$$ += digit1;})+ ("." {$$ += ".";} (digit:digit2 {$$ += digit2;})*)? ([eE]:exponentChar1 {$$ += exponentChar1;} ([+-]:signChar1 {$$ += signChar1;})? (digit:digit3 {$$ += digit3;})+)? ws
       / "." {$$ = ".";} (digit:digit4 {$$ += digit4;})+ ([eE]:exponentChar2 {$$ += exponentChar2;} ([+-]:signChar2 {$$ += signChar2;})? (digit:digit5 {$$ += digit5;})+)? ws;

expression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = additiveExpression:expression1 {$$ = expression1;} ("," ws additiveExpression:expression2 {$$ = "(" + std::move($$) + "," + expression2 + ")";})*;

additiveExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = multiplicativeExpression:expression1 {$$ = expression1;} ([+-]:op ws multiplicativeExpression:expression2 {$$ = "(" + std::move($$) + static_cast<char>(op) + expression2 + ")";})*;

multiplicativeExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = unaryExpression:expression1 {$$ = expression1;} ([*/%]:op ws unaryExpression:expression2 {$$ = "(" + std::move($$) + static_cast<char>(op) + expression2 + ")";})*;

unaryExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = [+-]:op ws unaryExpression:expression1 {$$ = static_cast<char>(op) + std::string("(") + expression1 + ")";}
                / newExpression:expression2 {$$ = expression2;};

newExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = &{if(!newAllowed) $? = "new not allowed here";} newKeyword newExpression:expression1 {$$ = "new (" + expression1 + ")";}
              / memberExpression:expression2 {$$ = expression2;};

memberExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = primaryExpression:expression {$$ = expression;} ("." ws identifier:identifier {$$ = "(" + std::move($$) + ")." + identifier;})*;
 
primaryExpression<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = "(" ws expression:expression ")" ws {$$ = expression;}
                  / identifier:identifier {$$ = identifier;}
                  / number:number {$$ = number;};

goal<escapesAllowedInIdentifiers:bool, newAllowed:bool>:string = ws {$$ = "";} (expression:expression {$$ = expression + ";";} ";" {std::cout << $_ << std::endl;} ws)* EOF;
